<?php
 namespace blobfolio\wp\wh\vendor\phone; use \blobfolio\wp\wh\vendor\common; class phone { const TYPES = array( 'fixed', 'mobile', 'pager', 'personal_number', 'premium_rate', 'shared_cost', 'toll_free', 'uan', 'voicemail', 'voip' ); const MIN_LENGTH = 3; const MAX_LENGTH = 30; const TEMPLATE = array( 'country'=>'', 'prefix'=>0, 'region'=>'', 'types'=>array(), 'number'=>'' ); const DEFAULT_REGION = 'US'; protected $phone = false; protected $tried = array(); public function __construct($phone='', $country='') { common\ref\cast::to_string($phone, true); common\ref\cast::to_string($country, true); $this->phone = false; static::sanitize_phone($phone); if (false === $phone) { return false; } static::sanitize_country($country); if (false === $country) { $country = 'US'; } if (false === $this->match($phone, $country)) { $func = "\\blobfolio\\wp\\wh\\vendor\\phone\\data\\data$country"; @require_once(dirname(__FILE__) . "/data/src/data$country.txt"); if (false === $this->match($phone, data\prefixes::PREFIXES[$func::PREFIX])) { if (strlen($func::REGION)) { if ($this->match($phone, data\prefixes::REGIONS[$func::REGION])) { return true; } } } else { return true; } } else { return true; } return $this->match($phone, data\prefixes::COUNTRIES); } protected function match($phone='', $countries=array()) { common\ref\cast::to_string($phone, true); common\ref\cast::to_array($countries); foreach ($countries as $c) { if (in_array($c, $this->tried, true)) { continue; } $this->tried[] = $c; $func = "\\blobfolio\\wp\\wh\\vendor\\phone\\data\\data$c"; @require_once(dirname(__FILE__) . "/data/src/data$c.txt"); if (false !== $tmp = $func::match($phone)) { $this->phone = $tmp; return true; } } return false; } public function __toString() { return $this->is_phone() ? $this->phone['number'] : ''; } public function is_phone($type=null) { if (!is_null($type)) { common\ref\cast::to_array($type); common\ref\mb::strtolower($type); $type = array_filter($type, 'strlen'); if (!count($type)) { $type = null; } } return false !== $this->phone && (is_null($type) || count(array_intersect($type, $this->phone['types']))); } public function get_data($key=null) { if (!$this->is_phone()) { return false; } if (!is_null($key)) { common\ref\cast::to_string($key, true); return isset($this->phone[$key]) ? $this->phone[$key] : false; } return $this->phone; } public static function sanitize_phone(&$phone = '') { common\ref\cast::to_string($phone); $from = array_keys(common\constants::NUMBER_CHARS); $to = array_values(common\constants::NUMBER_CHARS); $phone = str_replace($from, $to, $phone); $phone = preg_replace('/[^\d]/', '', $phone); if (!common\data::length_in_range($phone, static::MIN_LENGTH, static::MAX_LENGTH)) { $phone = false; } return true; } public static function sanitize_country(&$country='') { common\ref\cast::to_string($country, true); common\ref\sanitize::country($country); if (common\mb::strlen($country) === 2) { if (!in_array($country, data\prefixes::COUNTRIES, true)) { $country = false; } } else { $country = false; } return true; } } 