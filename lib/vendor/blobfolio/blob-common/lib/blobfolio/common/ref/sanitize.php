<?php
 namespace blobfolio\wp\wh\vendor\common\ref; use \blobfolio\wp\wh\vendor\common\constants; use \blobfolio\wp\wh\vendor\common\data; use \blobfolio\wp\wh\vendor\common\dom; use \blobfolio\wp\wh\vendor\common\file as v_file; use \blobfolio\wp\wh\vendor\common\mb as v_mb; use \blobfolio\wp\wh\vendor\common\sanitize as v_sanitize; use \blobfolio\wp\wh\vendor\domain\domain; use \blobfolio\wp\wh\vendor\ForceUTF8\Encoding; class sanitize { public static function accents(&$str) { if (is_array($str)) { foreach ($str as $k=>$v) { static::accents($str[$k]); } } else { cast::to_string($str); if (preg_match('/[\x80-\xff]/', $str)) { $str = strtr($str, constants::ACCENT_CHARS); } } return true; } public static function attribute_value(&$str='') { if (is_array($str)) { foreach ($str as $k=>$v) { static::attribute_value($str[$k]); } } else { cast::to_string($str); static::control_characters($str); format::decode_entities($str); mb::trim($str); } return true; } public static function cc(&$ccnum='') { cast::to_string($ccnum, true); $ccnum = preg_replace('/[^\d]/', '', $ccnum); $str = $ccnum; switch (v_mb::substr($ccnum, 0, 1)) { case 3: if (v_mb::strlen($ccnum) !== 15 || !preg_match('/3[47]/', $ccnum)) { $ccnum = false; return false; } break; case 4: if (!in_array(v_mb::strlen($ccnum), array(13,16), true)) { $ccnum = false; return false; } break; case 5: if (v_mb::strlen($ccnum) !== 16 || !preg_match('/5[1-5]/', $ccnum)) { $ccnum = false; return false; } break; case 6: if (v_mb::strlen($ccnum) !== 16 || intval(v_mb::substr($ccnum, 0, 4)) !== 6011) { $ccnum = false; return false; } break; default: $ccnum = false; return false; } $dig = v_mb::str_split($ccnum); $numdig = count($dig); $j = 0; for ($i = ($numdig - 2); $i >= 0; $i -= 2) { $dbl[$j] = $dig[$i] * 2; $j++; } $dblsz = count($dbl); $validate = 0; for ($i = 0; $i < $dblsz; $i++) { $add = v_mb::str_split($dbl[$i]); for ($j = 0; $j < count($add); $j++) { $validate += $add[$j]; } $add = ''; } for ($i = ($numdig - 1); $i >= 0; $i -= 2) { $validate += $dig[$i]; } if (intval(v_mb::substr($validate, -1, 1)) === 0) { $ccnum = $str; } else { $ccnum = false; } return true; } public static function control_characters(&$str='') { if (is_array($str)) { foreach ($str as $k=>$v) { static::control_characters($str[$k]); } } else { cast::to_string($str); $str = preg_replace('/[\x00-\x08\x0B\x0C\x0E-\x1F]/', '', $str); $str = preg_replace('/\\\\+0+/', '', $str); } return true; } public static function country(&$str='') { if (is_array($str)) { foreach ($str as $k=>$v) { static::country($str[$k]); } } else { cast::to_string($str); static::whitespace($str); mb::strtoupper($str); if (!array_key_exists($str, constants::COUNTRIES)) { $found = false; foreach (constants::COUNTRIES as $k=>$v) { if (v_mb::strtoupper($v['name']) === $str) { $str = $k; $found = true; break; } } if (!$found) { $str = ''; } } } return true; } public static function csv(&$str='') { if (is_array($str)) { foreach ($str as $k=>$v) { static::csv($str[$k]); } } else { cast::to_string($str); static::quotes($str); static::whitespace($str); while (false !== v_mb::strpos($str, '""')) { $str = str_replace('""', '"', $str); } $str = str_replace('"', '""', $str); } return true; } public static function datetime(&$str='') { if (is_array($str)) { foreach ($str as $k=>$v) { static::datetime($str[$k]); } } else { if ( is_string($str) && (!v_mb::strlen(v_mb::trim($str)) || (0 === v_mb::strpos($str, '0000-00-00'))) ) { $str = '0000-00-00 00:00:00'; return true; } if ( (is_int($str) && (strlen($str) !== 8)) || preg_match('/^\d{9,}$/', $str) ) { $str = date('Y-m-d H:i:s', $str); } cast::to_string($str); mb::trim($str); if ( !v_mb::strlen($str) || (v_mb::substr($str, 0, 10) === '0000-00-00') || (false === ($str = strtotime($str))) ) { $str = '0000-00-00 00:00:00'; } else { $str = date('Y-m-d H:i:s', $str); } } return true; } public static function date(&$str='') { if (is_array($str)) { foreach ($str as $k=>$v) { static::date($str[$k]); } } else { static::datetime($str); $str = v_mb::substr($str, 0, 10); } return true; } public static function domain(&$str='', $unicode=false) { if (is_array($str)) { foreach ($str as $k=>$v) { static::domain($str[$k], $unicode); } } else { cast::to_bool($unicode, true); $host = new domain($str, true); if ($host->is_fqdn() && !$host->is_ip()) { $str = $host->get_host($unicode); } else { $str = ''; return false; } } return true; } public static function ean(&$str, $formatted=false) { if (is_array($str)) { foreach ($str as $k=>$v) { static::ean($str[$k], $formatted); } } else { cast::to_string($str); $str = preg_replace('/[^\d]/', '', $str); $str = str_pad($str, 13, '0', STR_PAD_LEFT); while (strlen($str) > 13 && (0 === strpos($str, '0'))) { $str = substr($str, 1); } if (strlen($str) !== 13 || ('0000000000000' === $str)) { $str = ''; return false; } while (!static::gtin($str) && strlen($str) <= 18) { $str = "0$str"; } if (!static::gtin($str)) { $str = ''; return false; } if ($formatted) { $str = preg_replace('/^(\d{1})(\d{6})(\d{6})$/', '$1-$2-$3', $str); } } return true; } public static function email(&$str=null) { if (is_array($str)) { foreach ($str as $k=>$v) { static::email($str[$k]); } } else { cast::to_string($str); static::quotes($str); mb::strtolower($str); $str = preg_replace('/\([^)]*\)/u', '', $str); $str = str_replace(array("'", '"'), '', $str); if (v_mb::substr_count($str, '@') === 1) { $parts = explode('@', $str); $parts[0] = preg_replace('/[^\.a-z0-9\!#\$%&\*\+\-\=\?_~]/u', '', $parts[0]); $parts[0] = ltrim($parts[0], '.'); $parts[0] = rtrim($parts[0], '.'); if (!strlen($parts[0])) { $str = ''; return true; } $domain = new domain($parts[1]); if (!$domain->is_valid() || !$domain->is_fqdn() || $domain->is_ip()) { $str = ''; return true; } $parts[1] = (string) $domain; $str = implode('@', $parts); } else { $str = ''; return true; } } return true; } public static function file_extension(&$str='') { if (is_array($str)) { foreach ($str as $k=>$v) { static::file_extension($str[$k]); } } else { cast::to_string($str); mb::strtolower($str); static::whitespace($str); $str = ltrim($str, '*. '); $str = preg_replace('/\s/u', '', $str); } return true; } protected static function gtin($str) { $str = preg_replace('/[^\d]/', '', $str); $code = str_split(substr($str, 0, -1)); $check = (int) substr($str, -1); $total = 0; for ($x = count($code) - 1; $x >= 0; $x--) { $total += (($x % 2) * 2 + 1 ) * $code[$x]; } $checksum = (10 - ($total % 10)); return $checksum === $check; } public static function html(&$str=null) { if (is_array($str)) { foreach ($str as $k=>$v) { static::html($str[$k]); } } else { cast::to_string($str); $str = htmlspecialchars($str, ENT_QUOTES | ENT_HTML5, 'UTF-8'); } return true; } public static function hostname(&$domain, $www=false, $unicode=false) { cast::to_string($domain, true); cast::to_bool($www, true); cast::to_bool($unicode, true); $host = new domain($domain, !$www); if (!$host->is_valid()) { $domain = false; return false; } $domain = $host->get_host($unicode); return true; } public static function ip(&$str='', $restricted=false, $condense=true) { if (is_array($str)) { foreach ($str as $k=>$v) { static::ip($str[$k], $restricted, $condense); } } else { cast::to_string($str); mb::strtolower($str); cast::to_bool($restricted, true); cast::to_bool($condense, true); $str = preg_replace('/[^\d\.\:a-f]/', '', $str); if (preg_match('/^\[[\d\.\:a-f]+\]$/', $str)) { $str = substr($str, 1, -1); } if (preg_match('/^::/', $str) && (false !== strpos($str, '.'))) { $str = substr($str, 2); } if (filter_var($str, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)) { if ($condense) { $str = inet_ntop(inet_pton($str)); } else { $hex = unpack('H*hex', inet_pton($str)); $str = substr(preg_replace('/([A-f0-9]{4})/', '$1:', $hex['hex']), 0, -1); } } elseif (!filter_var($str, FILTER_VALIDATE_IP)) { $str = ''; } if ( !$restricted && strlen($str) && !filter_var($str, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE) ) { $str = ''; } } return true; } public static function iri_value(&$str='', $protocols=null, $domains=null) { if (is_array($str)) { foreach ($str as $k=>$v) { static::iri_value($str[$k], $protocols, $domains); } } else { cast::to_string($str); static::attribute_value($str); cast::to_array($protocols); $allowed_protocols = array_merge(constants::SVG_WHITELIST_PROTOCOLS, $protocols); mb::strtolower($allowed_protocols); $allowed_protocols = array_map('trim', $allowed_protocols); $allowed_protocols = array_filter($allowed_protocols, 'strlen'); $allowed_protocols = array_unique($allowed_protocols); sort($allowed_protocols); cast::to_array($domains); $allowed_domains = array_merge(constants::SVG_WHITELIST_DOMAINS, $domains); static::domain($allowed_domains); $allowed_domains = array_filter($allowed_domains, 'strlen'); $allowed_domains = array_unique($allowed_domains); sort($allowed_domains); $str = preg_replace('/^\/\//', 'https://', $str); $str = preg_replace('/\v/u', '', $str); $test = preg_replace('/\s/', '', $str); mb::strtolower($test); if (false !== v_mb::strpos($test, ':')) { $test = explode(':', $test); if (!in_array($test[0], $allowed_protocols, true)) { $str = ''; return true; } } if (filter_var($str, FILTER_SANITIZE_URL) !== $str) { $str = ''; return true; } if (preg_match('/^[\w\d]+:\/\//i', $str)) { $domain = v_sanitize::domain($str); if (strlen($domain) && !in_array($domain, $allowed_domains, true)) { $str = ''; } } } return true; } public static function isbn(&$str) { if (is_array($str)) { foreach ($str as $k=>$v) { static::isbn($str[$k]); } } else { cast::to_string($str); mb::strtoupper($str); $str = preg_replace('/[^\dX]/', '', $str); if (strlen($str) <= 10) { $str = str_pad($str, 10, '0', STR_PAD_LEFT); } elseif (strlen($str) < 13) { $str = preg_replace('/[^\d]/', '', $str); $str = str_pad($str, 13, '0', STR_PAD_LEFT); } if ( ('0000000000' === $str) || ('0000000000000' === $str) || strlen($str) > 13 ) { $str = ''; return false; } if (strlen($str) === 10) { $checksum = 0; for ($x = 0; $x < 9; $x++) { if ('X' === $str[$x]) { $checksum += 10 * (10 - $x); } else { $checksum += intval($str[$x]) * (10 - $x); } } $checksum = 11 - $checksum % 11; if (10 === $checksum) { $checksum = 'X'; } elseif (11 === $checksum) { $checksum = 0; } else { $checksum = (int) $checksum; } $check = ('X' === $str[9]) ? 'X' : intval($str[9]); if ($check !== $checksum) { $str = ''; return false; } } else { if (!static::gtin($str)) { $str = ''; return false; } } } return true; } public static function js(&$str='', $quote="'") { if (is_array($str)) { foreach ($str as $k=>$v) { static::js($str[$k], $quote); } } else { cast::to_string($str); sanitize::quotes($str); sanitize::whitespace($str); if ("'" === $quote) { $str = str_replace("'", "\'", $str); } elseif ('"' === $quote) { $str = str_replace('"', '\"', $str); } } return true; } public static function mime(&$str='') { if (is_array($str)) { foreach ($str as $k=>$v) { static::mime($str[$k]); } } else { cast::to_string($str); mb::strtolower($str); $str = preg_replace('/[^-+*.a-z0-9\/]/', '', $str); } return true; } public static function name(&$str='') { if (is_array($str)) { foreach ($str as $k=>$v) { static::name($str[$k]); } } else { cast::to_string($str); static::quotes($str); static::whitespace($str); $str = preg_replace('/[^\p{L}\p{Zs}\p{Pd}\d\'\"\,\.]/u', '', $str); static::whitespace($str); mb::ucwords($str); } return true; } public static function password(&$str='') { if (is_array($str)) { foreach ($str as $k=>$v) { static::password($str[$k]); } } else { cast::to_string($str); static::printable($str); static::whitespace($str); } return true; } public static function printable(&$str='') { if (is_array($str)) { foreach ($str as $k=>$v) { static::printable($str[$k]); } } else { cast::to_string($str); $str = str_replace("\r\n", "\n", $str); $str = str_replace("\r", "\n", $str); $str = preg_replace_callback( '/[^[:print:]]/u', function($match) { if ( ("\n" === $match[0]) || ("\t" === $match[0]) ) { return $match[0]; } return ''; }, $str ); } return true; } public static function province(&$str='') { if (is_array($str)) { foreach ($str as $k=>$v) { static::province($str[$k]); } } else { cast::to_string($str); static::whitespace($str); mb::strtoupper($str); if (!array_key_exists($str, constants::PROVINCES)) { if (false === ($str = data::array_isearch($str, constants::PROVINCES, true))) { $str = ''; } } } return true; } public static function quotes(&$str='') { if (is_array($str)) { foreach ($str as $k=>$v) { static::quotes($str[$k]); } } else { cast::to_string($str); $from = array_keys(constants::QUOTE_CHARS); $to = array_values(constants::QUOTE_CHARS); $str = str_replace($from, $to, $str); } return true; } public static function state(&$str='') { if (is_array($str)) { foreach ($str as $k=>$v) { static::state($str[$k]); } } else { cast::to_string($str); static::whitespace($str); mb::strtoupper($str); if (!array_key_exists($str, constants::STATES)) { if (false === ($str = data::array_isearch($str, constants::STATES, true))) { $str = ''; } } } return true; } public static function svg(&$str='', $tags=null, $attr=null, $protocols=null, $domains=null) { cast::to_string($str, true); cast::to_array($tags); cast::to_array($attr); cast::to_array($protocols); cast::to_array($domains); $allowed_tags = array_merge(constants::SVG_WHITELIST_TAGS, $tags); mb::strtolower($allowed_tags); $allowed_tags = array_map('trim', $allowed_tags); $allowed_tags = array_filter($allowed_tags, 'strlen'); $allowed_tags = array_unique($allowed_tags); sort($allowed_tags); $allowed_attributes = array_merge(constants::SVG_WHITELIST_ATTR, $attr); mb::strtolower($allowed_attributes); $allowed_attributes = array_map('trim', $allowed_attributes); $allowed_attributes = array_filter($allowed_attributes, 'strlen'); $allowed_attributes = array_unique($allowed_attributes); sort($allowed_attributes); $allowed_protocols = array_merge(constants::SVG_WHITELIST_PROTOCOLS, $protocols); mb::strtolower($allowed_protocols); $allowed_protocols = array_map('trim', $allowed_protocols); $allowed_protocols = array_filter($allowed_protocols, 'strlen'); $allowed_protocols = array_unique($allowed_protocols); sort($allowed_protocols); $allowed_domains = array_merge(constants::SVG_WHITELIST_DOMAINS, $domains); static::domain($allowed_domains); $allowed_domains = array_filter($allowed_domains, 'strlen'); $allowed_domains = array_unique($allowed_domains); sort($allowed_domains); $iri_attributes = constants::SVG_IRI_ATTRIBUTES; $dom = dom::load_svg($str); $svg = $dom->getElementsByTagName('svg'); if (!$svg->length) { $str = ''; return false; } $xpath = new \DOMXPath($dom); $tags = $dom->getElementsByTagName('*'); for ($x = $tags->length - 1; $x >= 0; $x--) { $tag = $tags->item($x); $tag_name = v_mb::strtolower($tag->tagName); if ( false !== v_mb::strpos($tag_name, ':') && !in_array($tag_name, $allowed_tags, true) ) { $tag_name = explode(':', $tag_name); $tag_name = $tag_name[1]; } if (!in_array($tag_name, $allowed_tags, true)) { dom::remove_node($tag); continue; } if ('style' === $tag_name) { $style = strip_tags(v_sanitize::attribute_value($tag->textContent)); $tag->textContent = $style; } $attributes = $xpath->query('.//@*', $tag); for ($y = $attributes->length - 1; $y >= 0; $y--) { $attribute = $attributes->item($y); $attribute_name = v_mb::strtolower($attribute->nodeName); if ( !in_array($attribute_name, $allowed_attributes, true) && false !== ($start = v_mb::strpos($attribute_name, ':')) ) { $attribute_name = v_mb::substr($attribute_name, $start + 1); } if ( !preg_match('/^data\-/', $attribute_name) && !in_array($attribute_name, $allowed_attributes, true) ) { $tag->removeAttribute($attribute->nodeName); continue; } $attribute_value = v_sanitize::attribute_value($attribute->value); $iri = false; if (in_array($attribute_name, $iri_attributes, true)) { $iri = true; static::iri_value($attribute_value, $allowed_protocols, $allowed_domains); } elseif (preg_match('/(?:\w+script):/xi', $attribute_value)) { $attribute_value = ''; } if ($attribute_value !== $attribute->value) { if ($iri) { $tag->removeAttribute($attribute->nodeName); } else { $tag->setAttribute($attribute->nodeName, $attribute_value); } } } } $tags = $dom->getElementsByTagName('*'); for ($x = 0; $x < $tags->length; $x++) { $tag = $tags->item($x); $nodes = $xpath->query('namespace::*', $tag); for ($y = 0; $y < $nodes->length; $y++) { $node = $nodes->item($y); $node_name = v_mb::strtolower($node->nodeName); if (!preg_match('/^xmlns:/', $node_name)) { dom::remove_namespace($dom, $node->localName); continue; } $node_value = v_sanitize::iri_value($node->nodeValue, $allowed_protocols, $allowed_domains); if (!strlen($node_value)) { dom::remove_namespace($dom, $node->localName); } } } $svg = dom::save_svg($dom); $svg = preg_replace_callback( '/url\s*\((.*)\s*\)/Ui', function($match) use($allowed_protocols, $allowed_domains) { $str = v_sanitize::attribute_value($match[1]); $str = ltrim($str, "'\""); $str = rtrim($str, "'\""); static::iri_value($str, $allowed_protocols, $allowed_domains); if (strlen($str)) { return "url('$str')"; } return 'none'; }, $svg ); $str = $svg; return true; } protected static $timezones; public static function timezone(&$str='') { if (is_null(static::$timezones)) { static::$timezones = array(); try { $tmp = \DateTimeZone::listIdentifiers(); foreach ($tmp as $t) { static::$timezones[v_mb::strtoupper($t)] = $t; } unset($tmp); } catch (\Throwable $e) { $noop; } catch (\Exception $e) { $noop; } } if (is_array($str)) { foreach ($str as $k=>$v) { static::timezone($str[$k]); } } else { mb::strtoupper($str); static::whitespace($str); if (isset(static::$timezones[$str])) { $str = static::$timezones[$str]; } else { $str = 'UTC'; } } return true; } public static function to_range(&$value, $min=null, $max=null) { if ( !is_null($min) && !is_null($max) && $min > $max ) { data::switcheroo($min, $max); } if (is_array($value)) { foreach ($value as $k=>$v) { static::to_range($v, $min, $max); } } else { $original = $value; try { if (!is_null($min) && $value < $min) { $value = $min; } if (!is_null($max) && $value > $max) { $value = $max; } } catch (\Throwable $e) { $value = $original; } catch (\Exception $e) { $value = $original; } } return true; } public static function upc(&$str, $formatted=false) { if (is_array($str)) { foreach ($str as $k=>$v) { static::upc($str[$k], $formatted); } } else { cast::to_string($str); $str = preg_replace('/[^\d]/', '', $str); $str = str_pad($str, 12, '0', STR_PAD_LEFT); while (strlen($str) > 12 && (0 === strpos($str, '0'))) { $str = substr($str, 1); } if (strlen($str) !== 12 || ('000000000000' === $str)) { $str = ''; return false; } $str = "0$str"; if (static::gtin($str)) { $str = substr($str, 1); } else { $str = ''; return false; } if ($formatted) { $str = preg_replace('/^(\d)(\d{5})(\d{5})(\d)$/', '$1-$2-$3-$4', $str); } } return true; } public static function url(&$str='') { if (is_array($str)) { foreach ($str as $k=>$v) { static::url($str[$k]); } } else { cast::to_string($str); $tmp = v_mb::parse_url($str); if (isset($tmp['scheme'])) { mb::strtolower($tmp['scheme']); } if (!isset($tmp['host'])) { return false; } $tmp['host'] = new domain($tmp['host']); if (!$tmp['host']->is_valid()) { return false; } $tmp['host'] = (string) $tmp['host']; $str = v_file::unparse_url($tmp); $str = filter_var($str, FILTER_SANITIZE_URL); if (!filter_var($str, FILTER_VALIDATE_URL, FILTER_FLAG_SCHEME_REQUIRED | FILTER_FLAG_HOST_REQUIRED)) { $str = ''; } } return true; } public static function utf8(&$str='') { if (is_array($str)) { foreach ($str as $k=>$v) { static::utf8($str[$k]); } } elseif (!is_numeric($str) && !is_bool($str)) { try { $str = (string) $str; } catch (\Throwable $e) { $str = ''; } catch (\Exception $e) { $str = ''; } $str = Encoding::toUTF8($str); $str = (1 === @preg_match('/^./us', $str)) ? $str : ''; } return true; } public static function whitespace(&$str='', $newlines=0) { if (is_array($str)) { foreach ($str as $k=>$v) { static::whitespace($str[$k], $newlines); } } else { cast::to_string($str); cast::to_int($newlines, true); static::to_range($newlines, 0); if (!$newlines) { $str = preg_replace('/\s+/u', ' ', $str); mb::trim($str); return true; } mb::trim($str); $str = str_replace("\r\n", "\n", $str); $str = preg_replace('/\v/u', "\n", $str); $str = explode("\n", $str); static::whitespace($str); $str = implode("\n", $str); $str = preg_replace('/\n{' . ($newlines + 1) . ',}/', str_repeat("\n", $newlines), $str); $str = trim($str); } return true; } public static function whitespace_multiline(&$str='', $newlines=1) { static::whitespace($str, $newlines); return true; } public static function zip5(&$str='') { if (is_array($str)) { foreach ($str as $k=>$v) { static::zip5($str[$k]); } } else { cast::to_string($zip5); $str = preg_replace('/[^\d]/', '', $str); if (v_mb::strlen($str) < 5) { $str = sprintf('%05d', $str); } elseif (v_mb::strlen($str) > 5) { $str = v_mb::substr($str, 0, 5); } if ('00000' === $str) { $str = ''; } } return true; } } 